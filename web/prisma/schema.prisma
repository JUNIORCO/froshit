generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

enum Role {
  Admin
  Organizer
  Leader
  Froshee
}

enum PaymentType {
  Cash
  Online
}

model University {
  // id
  id String @id @default(uuid())

  // attributes
  name      String @unique
  subdomain String @unique
  imageUrl  String
  color     String

  // associations
  froshs    Frosh[]
  profiles  Profile[]
  resources Resource[]
  offers    Offer[]

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // map
  @@map("university")
}

model Frosh {
  // id
  id String @id @default(uuid())

  // attributes
  name        String
  description String

  // associations
  university   University @relation(fields: [universityId], references: [id])
  universityId String

  events   Event[]
  teams    Team[]
  profiles Profile[]

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // constraints
  @@unique([name, universityId]) // froshs in the same university cannot have the same name
  // map
  @@map("frosh")
}

model Event {
  // id
  id String @id @default(uuid())

  // attributes
  name          String
  description   String
  startDate     DateTime
  endDate       DateTime
  location      String
  accessibility String
  imageUrl      String?

  // associations
  frosh   Frosh  @relation(fields: [froshId], references: [id], onDelete: Cascade) // TODO make one to many
  froshId String

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // map
  @@map("event")
}

model Team {
  // id
  id String @id @default(uuid())

  // attributes
  name   String
  number String

  // associations
  frosh   Frosh  @relation(fields: [froshId], references: [id], onDelete: Cascade)
  froshId String

  profiles Profile[]

  // dates
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Message   Message[]

  // uniqueness
  @@unique([froshId, number]) // can't have two teams with the same number and froshs
  // map
  @@map("team")
}

model Profile {
  // id
  id String @id @default(uuid())

  // attributes
  email         String       @unique
  phoneNumber   String?       @unique
  firstName     String
  lastName      String
  role          Role
  paid          Int?
  paymentAmount Int?
  paymentType   PaymentType?
  interests     String?
  imageUrl      String?
  program       String?

  // associations
  university   University @relation(fields: [universityId], references: [id])
  universityId String

  frosh   Frosh?  @relation(fields: [froshId], references: [id], onDelete: SetNull) // optional because admin/organizers are not part of a froshs
  froshId String?

  team   Team?   @relation(fields: [teamId], references: [id], onDelete: SetNull) // optional because admin/organizers are not part of a team
  teamId String?

  messages   Message[]

  // dates
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  // map
  @@map("profile")
}

model Payment {
  // id
  id String @id @default(uuid())

  // attributes
  amount String
  type   PaymentType

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // map
  @@map("payment")
}

model ResourceTag {
  // id
  id String @id @default(uuid())

  // attributes
  name     String
  imageUrl String

  // associations
  resources Resource[]

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // map
  @@map("resource_tag")
}

model Resource {
  // id
  id String @id @default(uuid())

  // attributes
  title       String
  description String
  phoneNumber String?
  email       String?

  // associations
  resourceTag   ResourceTag @relation(fields: [resourceTagId], references: [id], onDelete: Cascade)
  resourceTagId String

  university   University @relation(fields: [universityId], references: [id])
  universityId String

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // map
  @@map("resource")
}

model Offer {
  // id
  id String @id @default(uuid())

  // attributes
  title       String
  description String
  location    String
  provider    String
  imageUrl    String
  color       String

  // associations
  // TODO maybe change to froshs?
  university   University @relation(fields: [universityId], references: [id])
  universityId String

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // map
  @@map("offer")
}

model Message {
  // id
  id String @id @default(uuid())

  // attributes
  content          String
  profileFirstName String
  profileLastName  String
  profileImageUrl  String?
  profileRole      Role

  // associations
  Profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  // dates
  createdAt DateTime @default(now())

  // map
  @@map("message")
}
