generator client {
  provider = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

enum Role {
  Admin
  Organizer
  Leader
  Froshee
}

enum Interest {
  Travel
  Outdoors
  Adventure
  Hiking
  Fishing
  Hunting
  Camping
  Beach
  Music
  Books
  Gaming
  Netflix
  Movies
  Writing
  Concerts
  Cooking
  Beer
  Food
  Wine
  Pizza
  Coffee
  Sports
  Gym
  Walks
  Fitness
  Dancing
  Football
  Basketball
  Baseball
  Hockey
  Pets
}

model University {
  // id
  id String @id @default(uuid())

  // attributes
  name      String @unique
  subdomain String @unique
  imageUrl  String

  // associations
  programs  Program[]
  froshs    Frosh[]
  profiles  Profile[]
  resources Resource[]
  offers    Offer[]

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // map
  @@map("university")
}

model Program {
  // id
  id String @id @default(uuid())

  // attributes
  name     String
  profiles Profile[]

  // associations
  university   University @relation(fields: [universityId], references: [id])
  universityId String

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // map
  @@map("program")
}

model Frosh {
  // id
  id String @id @default(uuid())

  // attributes
  name        String
  description String
  ticketPrice Int

  // associations
  university   University @relation(fields: [universityId], references: [id])
  universityId String

  events       Event[]
  teams        Team[]
  profiles     Profile[]
  Notification Notification[]

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // constraints
  @@unique([name, universityId]) // froshs in the same university cannot have the same name
  // map
  @@map("frosh")
}

model Event {
  // id
  id String @id @default(uuid())

  // attributes
  name          String
  description   String
  startDate     DateTime
  endDate       DateTime
  location      String
  accessibility String
  imageUrl      String?

  // associations
  frosh   Frosh  @relation(fields: [froshId], references: [id]) // TODO make one to many
  froshId String

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // map
  @@map("event")
}

model Team {
  // id
  id String @id @default(uuid())

  // attributes
  name   String
  number String

  // associations
  frosh   Frosh  @relation(fields: [froshId], references: [id])
  froshId String

  profiles     Profile[]
  Notification Notification[]

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // uniqueness
  @@unique([froshId, number]) // can't have two teams with the same number and frosh
  // map
  @@map("team")
}

model Profile {
  // id
  id String @id @default(uuid())

  // attributes
  email       String     @unique
  phoneNumber String     @unique
  firstName   String
  lastName    String
  role        Role
  paid        Int?
  interests   Interest[]
  imageUrl    String?

  // associations
  university   University @relation(fields: [universityId], references: [id])
  universityId String

  program   Program? @relation(fields: [programId], references: [id])
  programId String? // optional because admin/organizers are not part of a program

  frosh   Frosh?  @relation(fields: [froshId], references: [id]) // optional because admin/organizers are not part of a frosh
  froshId String?

  team   Team?   @relation(fields: [teamId], references: [id]) // optional because admin/organizers are not part of a team
  teamId String?

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // map
  @@map("profile")
}

model ResourceTag {
  // id
  id String @id @default(uuid())

  // attributes
  name String
  imageUrl String

  // associations
  resources Resource[]

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // map
  @@map("resource_tag")
}

model Resource {
  // id
  id String @id @default(uuid())

  // attributes
  title       String
  description String
  phoneNumber String?
  email       String?

  // associations
  resourceTag   ResourceTag @relation(fields: [resourceTagId], references: [id])
  resourceTagId String

  university   University @relation(fields: [universityId], references: [id])
  universityId String

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // map
  @@map("resource")
}

model Offer {
  // id
  id String @id @default(uuid())

  // attributes
  title       String
  description String
  location    String
  provider    String
  imageUrl    String
  color       String

  // associations
  // TODO maybe change to frosh?
  university   University @relation(fields: [universityId], references: [id])
  universityId String

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // map
  @@map("offer")
}

model Notification {
  // id
  id String @id @default(uuid())

  // attributes
  title String
  body  String

  // associations
  frosh   Frosh?  @relation(fields: [froshId], references: [id])
  froshId String?

  team   Team?   @relation(fields: [teamId], references: [id])
  teamId String?

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // map
  @@map("notification")
}
