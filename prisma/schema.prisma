generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_DATABASE_URL")
}

enum Role {
  Admin
  Organizer
  Leader
  Froshee
}

enum Interest {
  Travel
  Outdoors
  Adventure
  Hiking
  Fishing
  Hutning
  Camping
  Beach
  Music
  Books
  Gaming
  Netflix
  Movies
  Writing
  Concerts
  Cooking
  Beer
  Food
  Wine
  Pizza
  Coffee
  Sports
  Gym
  Walks
  Fitness
  Dancing
  Football
  Basketball
  Baseball
  Hockey
  Pets
}

model University {
  // id
  id        Int    @id @default(autoincrement())
  // attributes
  name      String @unique
  subdomain String @unique
  imageUrl  String

  // associations
  programs Program[]
  froshs   Frosh[]
  profiles Profile[]

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Program {
  // id
  id Int @id @default(autoincrement())

  // attributes
  name     String
  profiles Profile[]

  // associations
  university   University @relation(fields: [universityId], references: [id])
  universityId Int // relation scalar field - university associated to the program

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Frosh {
  // id
  id Int @id @default(autoincrement())

  // attributes
  name        String
  description String
  imageUrl    String
  ticketPrice Int

  // associations
  university   University @relation(fields: [universityId], references: [id])
  universityId Int // relation scalar field - university associated to the frosh

  events   Event[]
  teams    Team[]
  profiles Profile[]

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // constraints
  @@unique([name, universityId]) // froshs in the same university cannot have the same name
}

model Event {
  // id
  id Int @id @default(autoincrement())

  // attributes
  name          String
  description   String
  startDate     DateTime
  endDate       DateTime
  imageUrl      String
  location      String
  accessibility String

  // associations
  frosh   Frosh @relation(fields: [froshId], references: [id])
  froshId Int // relation scalar field - which frosh the event is associated to

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  // id
  id Int @id @default(autoincrement())

  // attributes
  name String

  // associations
  frosh   Frosh @relation(fields: [froshId], references: [id])
  froshId Int // relation scalar field - which frosh the team is associated to

  profiles Profile[]

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  // id
  id Int @id @default(autoincrement())

  // attributes
  name        String
  email       String     @unique
  phoneNumber String     @unique
  role        Role
  avatarUrl   String
  paid        Int?
  interests   Interest[]

  // associations
  university   University @relation(fields: [universityId], references: [id])
  universityId Int // relation scalar field - which university the profile is associated to

  program   Program @relation(fields: [programId], references: [id])
  programId Int // relation scalar field - which program the profile is associated to

  frosh   Frosh? @relation(fields: [froshId], references: [id]) // optional because admin/organizers are not part of a frosh
  froshId Int? // relation scalar field - which frosh the profile is associated to

  team   Team? @relation(fields: [teamId], references: [id]) // optional because admin/organizers are not part of a team
  teamId Int? // relation scalar field - which team the profile is associated to

  // dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
